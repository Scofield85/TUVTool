{
    "collab_server" : "",
    "contents" : "rm(list=ls())\nlibrary(shiny)\nlibrary(RMySQL)\nlibrary(dygraphs)\nlibrary(zoo)\nlibrary(reshape2)\nlibrary(leaflet)\nlibrary(RColorBrewer)\nlibrary(rgl)\nlibrary(rglwidget)\nlibrary(ggplot2)\nsource(\"plot.R\")\nlibrary(plotly)\nlibrary(dplyr)\nsource(\"config.R\")\nsource(\"Triaxus_class.R\")\nsource(\"preprocessing.R\")\nsource(\"interpolation.R\")\nsource(\"hotspot.R\")\nsource(\"clustering.R\")\nsource(\"misc.R\")\n\n\n# color.bar <- function(lut, min, max=-min, nticks=11, ticks=seq(min, max, len=nticks), title='') {\n# \tscale = (length(lut)-1)/(max-min)\n#     dev.new(width=1.75, height=5)\n#     plot(c(0,10), c(min,max), type='n', bty='n', xaxt='n', xlab='', yaxt='n', ylab='', main=title)\n#     axis(2, ticks, las=1)\n# for (i in 1:(length(lut)-1)) {\n# y = (i-1)/scale + min\n#     \trect(0,y,10,y+1/scale, col=lut[i], border=NA)\n#     }\t\n# }\n\n\n\n# colorBarPlot <- function(value,color,title=\"\"){\n# \t# value and color are already sorted from min to max and is 31 levels by default. nticks = 5\n\n# \tscale <- (max(value)-min(value))/10\n\n# \tplot(c(0,10), c(0,10), type='n', bty='n', xaxt='n', xlab='', yaxt='n', ylab='', main=title)\n\n# \taxis(2, (seq(min(value),max(value),length.out=5)-min(value))/scale, las=1)\n\t\n# \tfor (i in 1:10) {\n# \t\ty = (i-1)/scale + min\n#     \trect(0,y,10,y+1/scale, col=lut[i], border=NA)\n#     }\t\n# }\n\n\n# x <- seq(-10, 10, length = 30)\n# y <- x\n# f <- function(x, y) { r <- sqrt(x^2 + y^2); 10 * sin(r)/r }\n# z <- outer(x, y, f)\n# z[is.na(z)] <- 1\n\noptions(rgl.useNULL=TRUE)\noptions(shiny.maxRequestSize=30*1024^2) \n\n\n\nshinyServer(function(input,output,session)\n{\n\toutput$threeDMap <- renderRglwidget({\n\t\t# progress <- shiny::Progress$new()\n    \t# Make sure it closes when we exit this reactive, even if there's an error\n    \t# on.exit(progress$close())\n    \t# progress$set(message = \"Making plot\", value = 0)\n\n\t\tallTriaxus <- visResultData()\n\t\tif(is.null(allTriaxus)){\n\t\t\treturn()\n\t\t}\n\t\tif(input$hotspot3d){\n\t\t\tplot_3d_hotspot(allTriaxus,input$varToVis)\n\t\t}else{\n\t\t\tplot_3d_value(allTriaxus,input$varToVis)\n\t\t}\n\t\tprint(\"finished plotting\")\n\t\trglwidget()   # This step is slow...\n\t})\n\t\n\toutput$colorBar <- renderPlot({\n\t\tallTriaxus <- visResultData()\n\t\tif(is.null(allTriaxus)){\n\t\t\treturn(NULL)\n\t\t}\n\t\tif(input$hotspot3d){\n\t\t\t# coloPal <- colorFactor(palette = c(\"blue\",\"white\",\"Red\"),as.factor(c(-1,0,1)))\n\t\t\t# colorBarValue <- as.factor(c(-1,0,1))\n\t\t\t# colorBarColor <- coloPal(colorBarValue)\n\t\t\t# colorBarPlot(colorBarValue,colorBarColor,nticks=3)\n\t\t\treturn(NULL)\n\t\t}\n\t\telse{\n\t\t\tv <- c()\n\t\t\tfor(myTriaxus in allTriaxus){\n\t\t\t\tv <- c(v,myTriaxus@resultData[,input$varToVis])\n\t\t\t}\n\t\t\tvarRange <- range(v,na.rm=TRUE)\n\t\t\tcoloPal <- colorNumeric(topo.colors(10),c(floor(varRange[1]),ceiling(varRange[2])))\n\n\t\t\tcolorBarValue <- seq(floor(varRange[1]),ceiling(varRange[2]),length.out=100)\n\t\t\tcolorBarColor <- coloPal(colorBarValue)\n\t\t\tcolorBarPlot(colorBarValue,colorBarColor,title=config$varUnit[input$varToVis])\n\t\t}\n\t})\n\n\toutput$colorBarCluster <- renderPlot({\n\t\tallTriaxus <- clusteredTriaxus()\n\t\tif(is.null(allTriaxus)){\n\t\t\treturn(NULL)\n\t\t}\n\t\tK <- isolate(input$clusteringNum)\n\n\t\tclusterName <- paste(\"cluster_\",K,sep=\"\")\n\t\tv <- c()\n\n\t\tfor(myTriaxus in allTriaxus){\n\t\t\tv <- c(v,myTriaxus@clusteringResults$clusteringIndex[[clusterName]])\n\t\t}\n\t\tvarRange <- range(v,na.rm=TRUE)\n\t\tcoloPal <- config$factorColor\n\n\t\tcolorBarValue <- 1:K\n\t\tcolorBarColor <- coloPal(colorBarValue)\n\t\tprint(colorBarValue)\n\t\tprint(colorBarColor)\n\t\tcolorBarPlot_cluster(colorBarValue,colorBarColor,title=\"cluster\")\n\t})\n\n\n\toutput$dygraph <- renderDygraph({\n\t\tmyTriaxus <- isolate(readTriaxus())\n\t\tdataPlot <- myTriaxus@rawData[,c(\"Seabird_depth\",\"BBE_depth\")]\n\t\tn <- nrow(dataPlot)\n\t\tdataPlot <- zoo(dataPlot,order.by=1:n)\n\t\tprint(dataPlot)\n\t    dygraph(dataPlot, main = \"Path segments\")\n  \t})\n\n\t\n\tclusteredTriaxus <- reactive({\n\t\tclusterButton()\n\t\tallTriaxus <- isolate(visResultData())\n\n\t\tif(is.null(allTriaxus)){\n\t\t\tprint(\"no data\")\n\t\t\treturn(NULL)\n\t\t}\n\t\t\n\t\tclusterName <- paste(\"cluster_\",isolate(input$clusteringNum),sep=\"\")\n\n\t\tif(is.null(allTriaxus[[1]]@clusteringResults$silhouetteList[[clusterName]])){\n\t\t\tprogress <- shiny::Progress$new()\n\t    \t# Make sure it closes when we exit this reactive, even if there's an error\n\t    \ton.exit(progress$close())\n\t    \tprogress$set(message = \"Start Clustering\", value = 0)\n\t\t\t\n\t\t\tvariableForClustering <- isolate(input$varForClustering)\n\t\t\tK <- isolate(as.integer(input$clusteringNum))\n\t\t\tallTriaxus <- clustering_main(allTriaxus,variableForClustering,Ks=c(K))\n\t\t}\n\t\treturn(allTriaxus)\n\t})\n\n\toutput$clustering <- renderRglwidget({\n\t\tallTriaxus <- clusteredTriaxus()\n\t\tif(is.null(allTriaxus)){\n\t\t\treturn(NULL)\n\t\t}\n\t\tplot_3d_clustering(allTriaxus,isolate(input$clusteringNum))\n\t\trglwidget()\n\t})\n\n\toutput$boxplot <- renderPlot({\n\t\tallTriaxus <- clusteredTriaxus()\n\t\tif(is.null(allTriaxus)){\n\t\t\treturn(NULL)\n\t\t}\n\t\tK <- isolate(as.integer(input$clusteringNum))\n\t\tprint(K)\n\t\tplot_boxplot(allTriaxus,isolate(config$interestVar),K)\n\t})\n\n\n\tgobutton <- eventReactive(input$goButton, {})\n\treadButton <- eventReactive(input$readButton, {})\n\tclusterButton <- eventReactive(input$startClustering, {})\n\n\tvisResultData <- reactive({\n\t\tif(is.null(input$resultFile$datapath[1])){\n\t\t\treturn(NULL)\n\t\t}\n\n\t\tallTriaxus <- readRDS(input$resultFile$datapath[1])\n\t\tallNames <- names(allTriaxus)\n\t\tnames(allNames) <- allNames\n\t\tvarNames <- allTriaxus[[1]]@config$interestVar\n\t\tnames(varNames) <- varNames\n\t\tupdateSelectInput(session, \"pathToVis\",\n\t\t\tchoices = as.list(allNames),selected=allNames[1]\n\t\t)\n\n\t\tupdateSelectInput(session, \"varToVis\",\n\t\t\tchoices = as.list(varNames),selected=varNames[1]\n\t\t)\n\t\tupdateSelectizeInput(session, 'varForClustering', choices = config$interestVar, selected= NULL, server = FALSE)\n\t\treturn(allTriaxus)\n\t})\n\n\toutput$rawVis <- renderPlot({\n\t\tallTriaxus <- visResultData()\n\t\tif(is.null(allTriaxus)){\n\t\t\treturn(NULL)\n\t\t}\n\t\tmyTriaxus <- allTriaxus[[input$pathToVis]]\n\n\t\tif(is.null(myTriaxus)){\n\t\t\treturn(NULL)\n\t\t}\n\t\tplot_raw(myTriaxus,input$varToVis)\n\t})\n\n\t\n\t\n\toutput$rawExplor <- renderPlot({\n\t\tmydata <- rawData()\n\t\tmydata <- mydata[,c(input$calRawVar,\"Seabird_depth\")]\n\t\tmydata$id <- 1:nrow(mydata)\n\t\tnames(mydata)[1]=\"value\"\n\t\tprint(names(mydata))\n\t\tqplot(id, -Seabird_depth, data=mydata,color=value)\n\t})\n\n\n\toutput$twoD_Vis <- renderPlot({\n\t\tif(is.null(input$resultFile)){\n\t\t\treturn()\n\t\t}\n\n\t\tallTriaxus <- visResultData()\n\t\tmyTriaxus <- allTriaxus[[input$pathToVis]]\n\n\t\tif(input$hotspot2d){\n\t\t\tplot_hotspot(myTriaxus,input$varToVis)\n\t\t}else{\n\t\t\tplot_2d(myTriaxus,input$varToVis)\n\t\t}\n\t\t\n\t})\n\n\n\treadTriaxus <- reactive({\n\t\trealName <- input$newFile$name[1]\n\t\tprogress <- Progress$new()\n\t\tmyTriaxus <- new(\"Base_Triaxus\",config,input$newFile$datapath[1],input$Seabird_anchor_index,\n\t\t\tinput$BBE_anchor_index,c(input$startIndex,input$endIndex),realName)\n\t\tprogress$set(message = \"Preprocessing\", value = 0)\n\t\tmyTriaxus <- preprocessing(myTriaxus)\n\t\ton.exit(progress$close())\n\t\tprint(\"preprocessing finished\")\n\t\treturn(myTriaxus)\n\t})\n\n\treadPreviousTriaxus <- reactive({\n\t\tif(is.null(input$PreviousFile$datapath[1])){\n\t\t\treturn(NULL)\n\t\t}\n\t\telse{\n\t\t\tprint(\"reading new file\")\n\t\t\treturn(readRDS(input$PreviousFile$datapath[1]))\n\t\t}\n\t})\n\t\n\tobserve({\n\t\treadButton()\n\t\tmyTriaxus <- isolate(readTriaxus())\n\t\toldTriaxus <- isolate(readPreviousTriaxus())\n\t\tupdateTabsetPanel(session, \"mapFilePage\", selected = \"Map\")\n\t\tgeoData <- myTriaxus@cleanData[,c(\"latitude\",\"longitude\",\"distance\",\"UTC\")]\n\t\tlatRange <- range(geoData$latitude)\n\t\tlongRange <- range(geoData$longitude)\n\t\tleafletProxy(\"calMap\", data =geoData) %>% clearShapes() %>%addPolylines(lng=~longitude,lat=~latitude,color=\"red\")  %>% fitBounds(longRange[1]-0.1, latRange[1]-0.1,longRange[2]+0.1, latRange[2]+0.1)\n\n\t\tif(!is.null(oldTriaxus)){\n\t\t\tprint(\"oldTriaxus exist\")\t\n\t\t\tfor(myTriaxus in oldTriaxus){\n\t\t\t\tpreviousGeoData <- myTriaxus@cleanData[,c(\"latitude\",\"longitude\",\"distance\")]\n\t\t\t\tleafletProxy(\"calMap\", data =previousGeoData) %>% addPolylines(lng=~longitude,lat=~latitude,color=\"yellow\")\n\t\t\t}\n\t\t}\n\t})\n\n\n\treadRawFile <- reactive({\n\t\tif(is.null(input$newFile$datapath[1])){\n\t\t\treturn(NULL)\n\t\t}\n\t\trawData <- read.csv(input$newFile$datapath[1])\n\t\trawData$n <- 1:nrow(rawData)\n\t\trawData <- rawData[,c(\"depth\",\"depth.1\",\"n\")]\n\t\tnames(rawData)[2] <- \"depth_1\"\n\t\trawData\t\t\n\t})\n\n\n\toutput$rawData_check <- renderPlot({\n\t\trawData <- readRawFile()\n\t\tif(!is.null(rawData)){\n\t\t\tstartIndex <- ifelse(input$startIndex_check<1,1,input$startIndex_check)\n\t\t\tendIndex <- ifelse(input$endIndex_check<1,nrow(rawData),input$endIndex_check)\n\n\t\t\tsubData <- rawData[startIndex:endIndex,]\n\t\t\t# print(summary(rawData))\n\t\t\tseabird_maxDepth_index <- which.max(subData$depth)\n\t\t\tBBE_maxDepth_index <- which.max(subData$depth_1)\n\n\t\t\tseabirdIndex <- subData$n[seabird_maxDepth_index]\n\t\t\tBBEIndex <- subData$n[BBE_maxDepth_index]\n\n\t\t\tplot(-depth~n,data=subData,type=\"l\")\n\t\t\tlines(-depth_1~n,data=subData,col=\"blue\")\n\t\t\tpoints(-subData$depth[seabird_maxDepth_index]~seabirdIndex,col=\"red\")\n\t\t\tpoints(-subData$depth_1[BBE_maxDepth_index]~BBEIndex,col=\"red\")\n\t\t\t\n\t\t\t# print(seabirdIndex)\n\t\t\tsuggestion <- paste(\"Seabird Index:\",seabirdIndex,\"/FlorProb Index:\",BBEIndex)\n\t\t\tupdateTextInput(session,\"suggestedAnchorIndex\",value = suggestion)\n\t\t}\n\t})\n\n\n\t# Calculate \n\tobserve({\n\t\tgobutton()\n\t\tprogress <- Progress$new()\n\n\t\tprogress$set(message = \"Reading file\", value = 0)\n\t\tmyTriaxus <- isolate(readTriaxus())\n\n\t\tprogress$set(message = \"Interpolation\", value = 0)\n\t\tmyTriaxus <- interpolation_main(myTriaxus,int_method=isolate(input$InterpolationMethod),det_method=isolate(input$detrendingMethod)) %>% hotspot_main()\n\t\t\n\t\tprogress$set(message = \"Reading Previous Results\", value = 0)\n\n\t\t# if(is.null(isolate(input$PreviousFile$datapath[1]))){\n\t\t# \tallTriaxus=list()\n\t\t# }\n\t\t# else{\n\t\t# \tallTriaxus <- readRDS(isolate(input$PreviousFile$datapath[1]))\n\t\t# }\n\n\t\tallTriaxus <- isolate(readPreviousTriaxus())\n\n\t\tif(is.null(allTriaxus)){\n\t\t\tallTriaxus=list()\n\t\t}\n\n\t\tallTriaxus[[myTriaxus@pathName]] <- myTriaxus\n\t\tnewTriaxusFileName <- paste(\"allTriaxus_upto_\",myTriaxus@pathName,sep=\"\")\n\t\tsaveRDS(allTriaxus,paste(config$outputFolder,newTriaxusFileName,\".rds\",sep=\"\"))\n\t\ton.exit(progress$close())\t\t\n\t})\n\t\n\toutput$calRaw <- renderPlot({\n\t\tif(!is.null(rawData)){\n\t\t\tvisData <- rawData[,c(\"Seabird_depth\",input$calRawVar)]\n\t\t\tnames(visData)[2]=\"value\"\n\t\t\tggplot(visData)+geom_point(aes(1:nrow(visData),-Seabird_depth,color=value))\n\t\t}\n\t})\n\n\toutput$calMap <- renderLeaflet({\t\t\n       \tleaflet(\"calMap\") %>% clearShapes() %>% addTiles()\n    })\n\t\n\toutput$visMap <- renderLeaflet({\n\t\tprint(\"visMap initialize\")\n       \tleaflet(\"visMap\") %>% clearShapes() %>% addTiles()\n       \t# print(geoData)\n    })\n})",
    "created" : 1461884159087.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "510454484",
    "id" : "587ABB67",
    "lastKnownWriteTime" : 1461883687,
    "last_content_update" : 1461883687,
    "path" : "~/Developer/Triaxus/TriaxusCode/src/server.R",
    "project_path" : "src/server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}